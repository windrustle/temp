<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1768251">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR nsi_okopf sel" enabled="true">
          <stringProp name="dataSource">z${stand}hcsnsidb</stringProp>
          <stringProp name="query">select name n from nsism.nsi_okopf where code=${okopf} and is_actual = true limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">zokopf</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to obtain OKOPF name from NSI DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to obtain OKOPF name from DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS okopf" enabled="true">
          <stringProp name="cacheKey">d2b74315-cb85-4f8d-bfcb-096043776fd9</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">try{
	HashMap hm=vars.getObject(&quot;zokopf&quot;)[0];
	vars.put(&quot;okopf&quot;,hm.n?&quot;&apos;&quot;+hm.n+&quot;&apos;&quot;:&quot;null&quot;);
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. OKOPF=&quot;+vars.get(&quot;okopf&quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to parse okopf name: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to parse okopf name: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR esia_users del" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">delete from users.esia_users where username=${user} returning 0;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to clean previous user data in ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to clean previous user data in DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR esia_users ins" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">insert into users.esia_users
(userid,username,firstname,lastname,middlename,personinn,personsnils,personogrn,personemail,authnmethod,authtoken,persontype,globalrole,memberofgroups,orgaddresses,orgcontacts,orgoid,orgkpp,orglegalform,orginn,orgname,orgshortname,orgogrn,orgposition,orgtype,password,gender,birthdate,orgbranchkpp,principaldocuments,principalcontacts)
values((select uuid_generate_v4()),${user},&apos;Тест&apos;,&apos;Тестов&apos;,&apos;Тестович&apos;,${pinn},null,${pogrn},&apos;test@test.ts&apos;,&apos;DS&apos;,(select uuid_generate_v4()),null,&apos;E&apos;,&apos;ADMIN, AUTHORIZED_SPECIALIST&apos;,&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;orgaddresses&gt;&lt;/orgaddresses&gt;&apos;,&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;orgcontacts&gt;&lt;contact&gt;&lt;contacttype&gt;PHN&lt;/contacttype&gt;&lt;value&gt;88000000000&lt;/value&gt;&lt;verificationstatus&gt;Y&lt;/verificationstatus&gt;&lt;/contact&gt;&lt;contact&gt;&lt;contacttype&gt;EML&lt;/contacttype&gt;&lt;value&gt;test@test.ts&lt;/value&gt;&lt;verificationstatus&gt;Y&lt;/verificationstatus&gt;&lt;/contact&gt;&lt;/orgcontacts&gt;&apos;,${oid},${hkpp},${okopf},${inn},${fname},${sname},&apos;${ogrn}&apos;,&apos;Директор&apos;,${type},&apos;RuRKoLwh2Kgm15NE3zi+Sw==&apos;,&apos;MALE&apos;,&apos;01.01.1980&apos;,${bkpp},null,null)
returning userid u;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">zuser</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert user data to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert user data to DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS uguid" enabled="true">
          <stringProp name="cacheKey">d2b74315-cb85-4f8d-bfcb-096043776fd9</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">try{
	HashMap hm=vars.getObject(&quot;zuser&quot;)[0];
	vars.put(&quot;uguid&quot;,hm.u?&quot;&apos;&quot;+hm.u.toString()+&quot;&apos;&quot;:&quot;null&quot;);
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. USERID=&quot;+vars.get(&quot;uguid&quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to parse ESIA user ID: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to parse ESIA user ID: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR roles del" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">delete from users.roles where userid=${uguid} returning 0;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to clean up old roles in ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to clean up old roles in DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR roles ins" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">insert into users.roles 
(userid,role)
values(${uguid},&apos;ADMIN&apos;)
returning userid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR roles ins" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">insert into users.roles 
(userid,role)
values(${uguid},&apos;AUTHORIZED_SPECIALIST&apos;)
returning userid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR roles ins" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">insert into users.roles 
(userid,role)
values(${uguid},&apos;CITIZEN&apos;)
returning userid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR roles ins" enabled="true">
          <stringProp name="dataSource">z${stand}usersdb</stringProp>
          <stringProp name="query">insert into users.roles 
(userid,role)
values(${uguid},&apos;ADDITIONAL_ADMIN&apos;)
returning userid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert role to ESIA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1472196194000</longProp>
        <longProp name="ThreadGroup.end_time">1472196194000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">config</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">stand</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS jdbc" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">15bec8ff-6cd2-402e-a6ee-24c9f774c645</stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;
void JDBC (String host,String base){
	vars.remove(&quot;z&quot;+vars.get(&quot;stand&quot;)+base);
	DataSourceElement ds = new DataSourceElement();
	ds.setProperty(&quot;autocommit&quot;,true);
	ds.setProperty(&quot;checkQuery&quot;,&quot;select 1&quot;);
	ds.setProperty(&quot;connectionAge&quot;,&quot;10000&quot;);
	ds.setProperty(&quot;dataSource&quot;,&quot;z&quot;+vars.get(&quot;stand&quot;)+base);
	ds.setProperty(&quot;dbUrl&quot;,&quot;jdbc:postgresql://&quot;+host+&quot;/&quot;+base);
	ds.setProperty(&quot;driver&quot;,&quot;org.postgresql.Driver&quot;);
	ds.setProperty(&quot;keepAlive&quot;,true);
	ds.setProperty(&quot;username&quot;,&quot;postgres&quot;);
	ds.setProperty(&quot;password&quot;,&quot;postgres&quot;);
	ds.setProperty(&quot;poolMax&quot;,&quot;0&quot;);
	ds.setProperty(&quot;timeout&quot;,&quot;60000&quot;);
	ds.setProperty(&quot;trimInterval&quot;,&quot;60000&quot;);
	ds.testStarted();
	return;
}
try{
	PGAS=[PSI02:&quot;localhost:20327&quot;,FT01:&quot;localhost:20417&quot;,GERA:&quot;localhost:20525&quot;,DEMO3:&quot;localhost:20526&quot;,DEMO4:&quot;localhost:20527&quot;,IZOLDA:&quot;localhost:20528&quot;,DEMO:&quot;localhost:20529&quot;,HELGA:&quot;localhost:20530&quot;,DEMO2:&quot;localhost:20531&quot;,KPAK:&quot;localhost:20612&quot;,PAMINTA:&quot;95.213.229.207:20354&quot;,AURA:&quot;95.213.229.207:21054&quot;,NT:&quot;172.16.202.8:5454&quot;,PODV:&quot;192.168.88.157:5432&quot;]
	IDPS=[PSI02:&quot;localhost:20506&quot;,FT01:&quot;localhost:20506&quot;,GERA:&quot;localhost:20506&quot;,DEMO3:&quot;localhost:20506&quot;,DEMO4:&quot;localhost:20506&quot;,IZOLDA:&quot;localhost:20506&quot;,DEMO:&quot;localhost:20506&quot;,HELGA:&quot;localhost:20506&quot;,DEMO2:&quot;localhost:20506&quot;,KPAK:&quot;localhost:20506&quot;,PAMINTA:&quot;172.16.204.6:5432&quot;,AURA:&quot;localhost:20506&quot;,NT:&quot;172.16.202.37:5432&quot;,PODV:&quot;192.168.88.157:5432&quot;]
	idp=IDPS[vars.get(&quot;stand&quot;)];
	pga=PGAS[vars.get(&quot;stand&quot;)];
	vars.put(&quot;idp&quot;,idp);
	vars.put(&quot;pga&quot;,pga);
	vars.put(&quot;i&quot;,&quot;0&quot;);
	JDBC(idp,&quot;usersdb&quot;);
	JDBC(pga,&quot;hcsordb&quot;);
	JDBC(pga,&quot;hcsppadb&quot;);
	JDBC(pga,&quot;hcsnsidb&quot;);
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. STAND=&quot;+vars.get(&quot;stand&quot;)+&quot;, ESIA=&quot;+vars.get(&quot;idp&quot;)+&quot;, HCSDB=&quot;+vars.get(&quot;pga&quot;));
if(!prev.isSuccessful()){
	log.error(&quot;Failed to configure JDBC: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
	prev.setStopTest(true);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR ppa_organizations sel" enabled="true">
            <stringProp name="dataSource">z${stand}hcsppadb</stringProp>
            <stringProp name="query">select org_oid oid, inn, kpp, okopf_code okc, organization_full_name ofn, organization_short_name osn, organization_type typ,&apos;${__RandomString(12,1234567890)}&apos; pin, ogrn ogr from ppasm.ppa_organizations where status=&apos;REGISTERED&apos; and relationship=&apos;HEAD&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">zppas</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	log.error(&quot;Failed to obtain data from PPA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
prev.setStopTest(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS log" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">15bec8ff-6cd2-402e-a6ee-24c9f774c645</stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat;
import org.apache.jmeter.threads.JMeterVariables; 
FileOutputStream fos=null;
while(!fos){fos=new FileOutputStream(&quot;users&quot;,true);}
if(vars.get(&quot;count&quot;)){
	vars.put(&quot;i&quot;,(vars.get(&quot;i&quot;).toInteger()+1).toString());
	if(vars.get(&quot;error&quot;)){
		fos.write((new SimpleDateFormat(&quot;yyyy.MM.dd HH:mm:ss&quot;).format(new Date())+&quot;, &quot;+vars.get(&quot;stand&quot;)+&quot;_&quot;+vars.get(&quot;ogrn&quot;)+&quot; (ERROR: &quot;+vars.get(&quot;error&quot;)+&quot;)\r\n&quot;).getBytes(&quot;UTF-8&quot;));
	}else{
		fos.write((new SimpleDateFormat(&quot;yyyy.MM.dd HH:mm:ss&quot;).format(new Date())+&quot;, &quot;+vars.get(&quot;stand&quot;)+&quot;_&quot;+vars.get(&quot;ogrn&quot;)+(vars.get(&quot;bkpp&quot;)!=&quot;null&quot;?&quot; (+ подразделения)&quot;:&quot;&quot;)+&quot;\r\n&quot;).getBytes(&quot;UTF-8&quot;));
	}
	vars.remove(&quot;error&quot;);
	vars.remove(&quot;zokopf&quot;);
	vars.remove(&quot;zuser&quot;);
	vars.remove(&quot;zkpps&quot;);
}else{
	vars.put(&quot;count&quot;,vars.getObject(&quot;zppas&quot;).size().toString());
	fos.write(&quot;Время, Логин (дополнительная информация)\r\n&quot;.getBytes(&quot;UTF-8&quot;));
}
fos.flush();
fos.close();
fos.finalize();
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. ITERATION=&quot;+vars.get(&quot;i&quot;)+&quot;. COUNTER=&quot;+vars.get(&quot;count&quot;));
if(!prev.isSuccessful()){
	log.error(&quot;Log writer error: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
	prev.setStopTest(true);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS head" enabled="true">
          <stringProp name="cacheKey">4c2ce1c1-f2f5-41ec-9e30-661b44460037</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">try{
	HashMap hm=vars.getObject(&quot;zppas&quot;)[vars.get(&quot;i&quot;).toInteger()];
	vars.put(&quot;ogrn&quot;,hm.ogr?:&quot;null&quot;);
	vars.put(&quot;user&quot;,&quot;&apos;&quot;+vars.get(&quot;stand&quot;)+&quot;_&quot;+vars.get(&quot;ogrn&quot;)+&quot;&apos;&quot;);
	vars.put(&quot;oid&quot;,hm.oid?&quot;&apos;&quot;+hm.oid+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;inn&quot;,hm.inn?&quot;&apos;&quot;+hm.inn+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;okopf&quot;,hm.okc?&quot;&apos;&quot;+hm.okc+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;fname&quot;,hm.ofn?&quot;&apos;&quot;+hm.ofn.replace(&quot;&apos;&quot;,&quot;\&quot;&quot;)+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;sname&quot;,hm.osn?&quot;&apos;&quot;+hm.osn.replace(&quot;&apos;&quot;,&quot;\&quot;&quot;)+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;type&quot;,hm.typ?&quot;&apos;&quot;+hm.typ+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;bkpp&quot;,&quot;null&quot;);
	if(hm.typ==&apos;B&apos;){
		vars.put(&quot;pinn&quot;,hm.inn?&quot;&apos;&quot;+hm.inn+&quot;&apos;&quot;:&quot;null&quot;);
		vars.put(&quot;pogrn&quot;,vars.get(&quot;ogrn&quot;));
		vars.put(&quot;hkpp&quot;,&quot;null&quot;);
	}else{
		vars.put(&quot;pinn&quot;,hm.pin?&quot;&apos;&quot;+hm.pin+&quot;&apos;&quot;:&quot;null&quot;);
		vars.put(&quot;pogrn&quot;,&quot;null&quot;);
		vars.put(&quot;hkpp&quot;,hm.kpp?&quot;&apos;&quot;+hm.kpp+&quot;&apos;&quot;:&quot;null&quot;);
	}
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. USER=&quot;+vars.get(&quot;user&quot;)+&quot;, ORGID=&quot;+vars.get(&quot;oid&quot;)+&quot;, INN=&quot;+vars.get(&quot;inn&quot;)+&quot;, OKOPF=&quot;+vars.get(&quot;okopf&quot;)+&quot;, FULLNAME=&quot;+vars.get(&quot;fname&quot;)+&quot;, SHORTNAME=&quot;+vars.get(&quot;sname&quot;)+&quot;, TYPE=&quot;+vars.get(&quot;type&quot;)+&quot;, BRANCHKPP=&quot;+vars.get(&quot;bkpp&quot;)+&quot;, HEADKPP=&quot;+vars.get(&quot;hkpp&quot;)+&quot;, PERSONINN=&quot;+vars.get(&quot;pinn&quot;)+&quot;, OGRNIP=&quot;+vars.get(&quot;pogrn&quot;)+&quot;, OGRN=&quot;+vars.get(&quot;ogrn&quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to parse data: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to parse data: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
	prev.setStopTest(true);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR or_managing_persons ins" enabled="true">
          <stringProp name="dataSource">z${stand}hcsordb</stringProp>
          <stringProp name="query">with ids as (select guid g,root_entity_guid r,public.uuid_generate_v4() u from orsm.or_organization_common where ogrn=&apos;${ogrn}&apos; and actual=true limit 1)
insert into orsm.or_managing_persons
(guid,root_entity_guid,organization_guid,organization_root_entity_guid,is_actual,last_editing_date,source_date,grn,ogrnip,inn,post_name,phone,first_name,middle_name,last_name,person_type)
values((select u from ids),(select u from ids),(select g from ids),(select r from ids),true,current_timestamp,current_timestamp,&apos;1232145&apos;,null,${pinn},&apos;Директор&apos;,&apos;88000000000&apos;,&apos;Тест&apos;,&apos;Тестович&apos;,&apos;Тестов&apos;,&apos;P&apos;)
returning guid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to insert managing person to OR DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to insert managing person to DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DR ppa_organizations sel" enabled="true">
          <stringProp name="dataSource">z${stand}hcsppadb</stringProp>
          <stringProp name="query">select kpp kpp, okopf_code okc from ppasm.ppa_organizations where ogrn=&apos;${ogrn}&apos; and status=&apos;REGISTERED&apos; and relationship=&apos;BRANCH&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">zkpps</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. request: &quot;+prev.getSamplerData().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;)+&quot;, response: &quot;+prev.getResponseDataAsString().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to obtain organization information from PPA DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to obtain organization information from DB: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS cnt,j" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">d2b74315-cb85-4f8d-bfcb-096043776fd9</stringProp>
          <stringProp name="script">try{
	vars.put(&quot;cnt&quot;,vars.getObject(&quot;zkpps&quot;).size().toString());
	vars.put(&quot;j&quot;,&quot;0&quot;);
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. KPPCOUNTER=&quot;+vars.get(&quot;cnt&quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to initialize counter: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to initialize counter: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${cnt}</stringProp>
          <stringProp name="TestPlan.comments">${cnt}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JS branch" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">4c2ce1c1-f2f5-41ec-9e30-661b44460037</stringProp>
            <stringProp name="script">try{
	HashMap hm=vars.getObject(&quot;zkpps&quot;)[vars.get(&quot;j&quot;).toInteger()];
	vars.put(&quot;j&quot;,(vars.get(&quot;j&quot;).toInteger()+1).toString());
	vars.put(&quot;user&quot;,&quot;&apos;&quot;+vars.get(&quot;stand&quot;)+&quot;_&quot;+vars.get(&quot;ogrn&quot;)+&quot;_&quot;+hm?.kpp+&quot;&apos;&quot;);
	vars.put(&quot;okopf&quot;,hm.okc?&quot;&apos;&quot;+hm.okc+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;bkpp&quot;,hm.kpp?&quot;&apos;&quot;+hm.kpp+&quot;&apos;&quot;:&quot;null&quot;);
	vars.put(&quot;pinn&quot;,&quot;null&quot;);
}catch(Exception e){
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(e.toString());
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">c13e6c94-2dad-4c07-b505-60b0bdfcba7b</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.warn(prev.getSampleLabel()+&quot;. ITERATOR2=&quot;+vars.get(&quot;j&quot;)+&quot;, USER=&quot;+vars.get(&quot;user&quot;)+&quot;, OKOPF=&quot;+vars.get(&quot;okopf&quot;)+&quot;, BRANCHKPP=&quot;+vars.get(&quot;bkpp&quot;));
if(!prev.isSuccessful()){
	if(!vars.get(&quot;error&quot;)){vars.put(&quot;error&quot;,&quot;Failed to parse data: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));}
	log.error(&quot;Failed to parse data: &quot;+prev.getResponseMessage().replaceAll(&quot;[\r\n]&quot;,&quot; &quot;));
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="graphiteMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="graphiteHost" elementType="Argument">
              <stringProp name="Argument.name">graphiteHost</stringProp>
              <stringProp name="Argument.value">sadnolhub.ddns.net</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="graphitePort" elementType="Argument">
              <stringProp name="Argument.name">graphitePort</stringProp>
              <stringProp name="Argument.value">2003</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rootMetricsPrefix" elementType="Argument">
              <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
              <stringProp name="Argument.value">jmeter.${__strReplace(${__TestPlanName},(.+?)\..*,$1,)}.${__strReplace(${__machineName},(.+?)\..*,$1,)}.ugs.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersList" elementType="Argument">
              <stringProp name="Argument.name">samplersList</stringProp>
              <stringProp name="Argument.value">.+</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="useRegexpForSamplersList" elementType="Argument">
              <stringProp name="Argument.name">useRegexpForSamplersList</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
